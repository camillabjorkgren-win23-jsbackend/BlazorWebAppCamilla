@page "/courses"
@using BlazorWebAppCamilla.Components.GraphQL
@using BlazorWebAppCamilla.Models
@using Microsoft.AspNetCore.Authorization

@attribute [StreamRendering]

@* @attribute [Authorize] *@


@* Gör om till en klient, det bör göras om man ska använda filtrering. *@

<section class="courses">
    <div class="container">
        <div class="bread-crumbs">
            <NavLink href="/"><i class="fa-light fa-house"></i>Home</NavLink><i class="fa-solid fa-angles-right"></i><NavLink href="/courses">Courses</NavLink>
        </div>

        <div class="upper-content">
            <h1 class="title">Courses</h1>

            @*  <div class="search-categories">
            <div class="select">
            <i class="fa-light fa-arrow-down"></i>
            <div class="selected">
            All categories
            </div>
            <div class="select-options d-none">
            <div class="option" data-value="all">All Categories</div>
            @if (courses.Categories != null)
            {
            foreach (var category in Model.Categories)
            {
            <div class="option" data-value="@category.CategoryName">@category.CategoryName</div>
            }
            }
            </div>
            </div> *@
            <div class="input-search-group">
                <input id="searchQuery" name="searchQuery" class="input-group-text" placeholder="Search courses" />
                <i class="fa-solid fa-magnifying-glass"></i>
            </div>
        </div>


        @if (courses == null)
        {
            <div><i class="fa-sharp fa-solid fa-spinner-third fa-spin"></i></div>
        }
        else
        {
            <div class="course-list">

                @foreach (var course in courses)
                {

                    var link = $"courses/details/{course.Id}";
                    <div class="course">
                        @if (course.IsBestseller)
                        {
                            <div class="best-seller">Best Seller</div>

                        }@* @{
                bool isBookmarked = false;
                if (course. != null)
                {
                foreach (var courseId in Model.CoursesId)
                {
                if (courseId!.Id == course.Id)
                {
                isBookmarked = true;
                }
                };
                }
                } *@


                        @*       @if (isBookmarked)
                {
                <form asp-action="RemoveCourse" asp-controller="Account" asp-route-ReturnUrl="@ViewData["ReturnUrl"]" method="post">
                <input type="hidden" name="userId" value="@user!.Id" />
                <input type="hidden" name="courseId" value="@course.Id" />
                <button type="submit" class="saved-item" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="Remove"><i class="fa-solid fa-bookmark"></i></button>
                </form>
                <a asp-action="RemoveCourse" asp-controller="Account" asp-route-id="@course.Id" asp-route-ReturnUrl="@ViewData["ReturnUrl"]"><button class="saved-item" data-course-id="@course.Id" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="Remove"><i class="fa-solid fa-bookmark filled"></i></button></a>
                }
                else
                {
                <form asp-action="JoinCourse" asp-controller="Account" method="post">
                <input type="hidden" name="userId" value="@user!.Id" />
                <input type="hidden" name="courseId" value="@course.Id" />
                <button type="submit" class="saved-item" data-course-id="@course.Id" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="Join Course"><i class="fa-light fa-bookmark"></i></button>
                </form>
                } *@



                        <div> <img class="course-image" src="@course.ImageUri" /></div>
                        <a class="course-details" href="@link">
                            <div class="info">
                                <h2 class="course-title">@course.Title</h2>
                                <p class="course-creator">by @course.Author</p>
                                <div class="course-prices">
                                    @if (course.DiscountPrice > 0)
                                    {
                                        <div class="discount-price">$@course.DiscountPrice</div>
                                        <div class="original-price discount">$@course.Price</div>
                                    }
                                    else
                                    {
                                        <div class="original-price">$@course.Price</div>
                                    }

                                </div>

                                <hr />
                                <div class="course-footer">
                                    <div class="course-hours"><i class="fa-regular fa-clock"></i> @course.Hours</div>
                                    <div class="course-likes">
                                        <i class="fa-regular fa-thumbs-up"></i>
                                        <span>@course.LikesInProcent</span>
                                        <span>(@course.LikesInNumbers)</span>
                                    </div>
                                </div>
                            </div>
                        </a>
                    </div>
                }

            </div>
        }

    </div>
</section>

@*      @if (Model.Pagination != null && Model.Pagination.TotalPages > 1)
        {
        <nav>
        <div class="pagination">
        @for (int i = 1; i <= Model.Pagination.TotalPages; i++)
        {
        if (i == Model.Pagination.CurrentPage)
        {
        <span class="number active page-item">@i</span>
        }
        else
        {
        <a class="number page-item" href="@Url.Action("Courses", new {pageNumber = i, pageSize = Model.Pagination.PageSize})">@i</a>
        }
        }
        </div>
        </nav>
        } *@


<aside class="work-with-us">
    <div class="container">
        <div class="left">
            <p>Ready to get started?</p>
            <h2>Take Your <span class="color">Skills</span> to the Next Level</h2>
            <button class="btn-theme">Work with us</button>
        </div>
        <div class="right">
            <img src="/images/illustration.svg">
        </div>
    </div>
</aside>

@* <script defer src="../wwwroot/js/FilterCourse.js"></script> *@

@code {
    private List<CourseCardModel>? courses;

    protected override async Task OnInitializedAsync()
    {
        var query = new GraphQLQuery
            {
                Query = "{getCourses {id imageUri isDigital isBestseller likes likesInProcent title authors{name} prices {price discount}}}"
            };

        var response = await Http.PostAsJsonAsync("https://courseprovider-silicon-camilla.azurewebsites.net/api/graphql?code=LL18Cb5IbCut7M9hw0bCm5RFI7hOjOJwHOmU6-Dyd1TXAzFuSGQ4FA%3D%3D", query);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<DynamicGraphQLResponse>();

            if (result?.Data.TryGetProperty("getCourses", out var coursesElement) == true)
            {
                courses = coursesElement.EnumerateArray().Select(course =>
                {
                    var courseModel = new CourseCardModel();

                    if (course.TryGetProperty("id", out var idElement))
                    {
                        courseModel.Id = idElement.GetString();
                    }
                    if (course.TryGetProperty("title", out var titleElement))
                    {
                        courseModel.Title = titleElement.GetString();
                    }
                    if (course.TryGetProperty("isBestseller", out var isBestsellerElement))
                    {
                        courseModel.IsBestseller = isBestsellerElement.GetBoolean();
                    }
                    if (course.TryGetProperty("isDigital", out var isDigitalElement))
                    {
                        courseModel.IsDigital = isDigitalElement.GetBoolean();
                    }
                    if (course.TryGetProperty("likesInProcent", out var likesInProcentElement))
                    {
                        courseModel.LikesInProcent = likesInProcentElement.GetString();
                    }
                    if (course.TryGetProperty("likes", out var likesElement))
                    {
                        courseModel.LikesInNumbers = likesElement.GetString();
                    }
                    if (course.TryGetProperty("hours", out var hoursElement))
                    {
                        courseModel.Hours = hoursElement.GetString();
                    }
                    if (course.TryGetProperty("authors", out var authorsElement) && authorsElement.GetArrayLength() > 0)
                    {
                        courseModel.Author = authorsElement[0].GetProperty("name").GetString();
                    }
                    if (course.TryGetProperty("prices", out var pricesElement))
                    {
                        if (pricesElement.TryGetProperty("price", out var priceElement))
                        {
                            courseModel.Price = priceElement.GetDecimal();
                        }
                        if (pricesElement.TryGetProperty("discount", out var discountElement))
                        {
                            courseModel.DiscountPrice = discountElement.GetDecimal();
                        }
                    }
                    if (course.TryGetProperty("imageUri", out var imageUriElement))
                    {
                        courseModel.ImageUri = imageUriElement.GetString();
                    }

                    return courseModel;
                }).ToList();
            }
            else
            {
                // Logga ett felmeddelande om "getCourses" inte finns i svaret
                Console.WriteLine("getCourses saknas i JSON-svaret.");
            }
        }
        else
        {
            // Logga felmeddelande om HTTP-förfrågan misslyckas
            Console.WriteLine($"HTTP-förfrågan misslyckades med statuskod: {response.StatusCode}");
        }
    }
}

            // https://youtu.be/K9JXYil6LMI?t=7498 