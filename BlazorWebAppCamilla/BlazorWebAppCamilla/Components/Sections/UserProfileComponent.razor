@attribute [StreamRendering]

@if (user == null)
{
    <p>Loading...</p>

}
else
{
    <div class="user">
        <div class="info">
            <div class="user-img">
                @if (user.UserProfile != null)
                {
                    <img src="/uploads/@user.UserProfile.ProfileImg" alt="profile image">
                }
                else
                {
                    <img src="/images/profile-image.svg" alt="default profile image">
                }
                <EditForm enctype="multipart/form-data" method="post" asp-action="UploadImage" Model="@uploadModel" FormName="ProfileUpload" OnValidSubmit="HandleProfileImgUpload">
                    <InputFile type="file" id="uploadFile" OnChange="HandleFileSelected" name="file" hidden />
                    <label for="uploadFile" class="btn btn-circle btn-circle-sm"><i class="fa-regular fa-refresh"></i></label>
                </EditForm>
            </div>

            <h6 class="name">@user.UserProfile!.FirstName @user.UserProfile.LastName</h6>
            <p class="email">@user.Email</p>
        </div>
        <div class="btn-user">
            <NavLink asp-controller="Account" asp-action="Index"><button class="button btn active"><i class="fa-light fa-gear i"></i> Account Details</button></NavLink>
            <NavLink asp-action="AccountSecurity"><button class="button btn"><i class="fa-light fa-lock i"></i> Security</button></NavLink>
            <NavLink asp-action="AccountSavedItems" asp-controller="Account"><button class="button btn"><i class="fa-light fa-bookmark i"></i> Saved Courses</button></NavLink>
            <NavLink asp-controller="Auth" asp-action="signout" class="signout"><i class="fa-light fa-right-from-bracket i"></i> Sign Out</NavLink>
        </div>
    </div>
}


@code {

    private ApplicationUser user = default!;
    private MultipartFormDataContent uploadModel = new MultipartFormDataContent();
    private IBrowserFile? selectedFile;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserDataAsync();
    }

    private async Task LoadUserDataAsync()
    {
        user = await UserManager.GetUserAsync(HttpContext.User);
        if (user != null)
        {
            user = await ApplicationUserRepository.GetUserById(user.Id);
        }
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    public async Task HandleProfileImgUpload()
    {
        using var content = new MultipartFormDataContent();
        var fileContent = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 1024 * 1024 * 15));
        fileContent.Headers.ContentType = new MediaTypeHeaderValue(selectedFile.ContentType);
        content.Add(fileContent, "file", selectedFile!.Name);

        try
        {
            var response = await Http.PostAsync("http://fileprovider-silicon-camilla.azurewebsites.net/api/upload", content);
            if (response.IsSuccessStatusCode)
            {
                await LoadUserDataAsync();

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }
}
