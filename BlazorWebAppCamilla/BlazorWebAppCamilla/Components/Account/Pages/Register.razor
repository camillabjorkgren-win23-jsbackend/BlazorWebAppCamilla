@page "/signup"
@rendermode InteractiveServer
@inject HttpClient Http

<PageTitle>Sign Up</PageTitle>


<section class="sign-up">
    <div class="container">
        <div class="title">
            <h1>Create Account</h1>
            <p>Already have an account? <NavLink href="/signin">Sign in here.</NavLink></p>
        </div>

        @if (!string.IsNullOrEmpty(statusMessage))
        {
            <div class="errormessage">
                @statusMessage
            </div>
        }
        <EditForm class="form" Model="SignUpForm" FormName="register" OnValidSubmit="OnValidSubmit" novalidate>
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="name">
                <div class="first-name">
                    <div class="mb-3">
                        <label class="form-label">First name</label>
                        <InputText class="form-control" @bind-Value="SignUpForm.FirstName" />
                        <ValidationMessage For="() => SignUpForm.FirstName" class="text-danger" />
                    </div>
                </div>
                <div class="last-name">
                    <div class="mb-3">
                        <label class="form-label">Last name</label>
                        <InputText class="form-control" @bind-Value="SignUpForm.LastName" />
                        <ValidationMessage For="() => SignUpForm.LastName" class="text-danger" />
                    </div>
                </div>
            </div>

            <div class="mb-3">
                <label class="form-label">Email</label>
                <InputText class="form-control" type="email" @bind-Value="SignUpForm.Email" />
                <ValidationMessage For="() => SignUpForm.Email" class="text-danger" />
            </div>

            <div class="mb-3">
                <label class="form-label">Password</label>
                <InputText class="form-control" type="password" @bind-Value="SignUpForm.Password" />
                <ValidationMessage For="() => SignUpForm.Password" class="text-danger" />
            </div>

            <div class="mb-3">
                <label class="form-label">Confirm Password</label>
                <InputText class="form-control" type="password" @bind-Value="SignUpForm.ConfirmPassword" />
                <ValidationMessage For="() => SignUpForm.ConfirmPassword" class="text-danger" />
            </div>

            <div class="mb-3 form-check">
                <InputCheckbox @bind-Value="SignUpForm.TermsAndConditions" class="form-check-input" />
                <label class="form-check-label">I agree to the <NavLink href="/Terms">Terms & Conditions</NavLink></label>
                <ValidationMessage For="() => SignUpForm.TermsAndConditions" class="text-danger" />
            </div>

            <button type="submit" class="btn-theme-s">Sign Up</button>
        </EditForm>
    </div>
</section>

@code {
    public string statusMessage = "";

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromForm]
    public SignUpFormModel SignUpForm { get; set; } = new();


    public class SignUpFormModel
    {
        [Display(Name = "First name", Prompt = "Enter your first name", Order = 0)]
        [Required(ErrorMessage = "First name is required")]
        [MinLength(2, ErrorMessage = "First name must be at least 2 characters long")]
        public string FirstName { get; set; } = null!;

        [Display(Name = "Last name", Prompt = "Enter your last name", Order = 1)]
        [Required(ErrorMessage = "Last name is required")]
        [MinLength(2, ErrorMessage = "Last name must be at least 2 characters long")]
        public string LastName { get; set; } = null!;

        [DataType(DataType.EmailAddress)]
        [Display(Name = "Email address", Prompt = "Enter your email address", Order = 2)]
        [Required(ErrorMessage = "Email is required")]
        [RegularExpression("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$", ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = null!;

        [DataType(DataType.Password)]
        [Display(Name = "Password", Prompt = "Enter your password", Order = 3)]
        [Required(ErrorMessage = "A strong password is required")]
        [RegularExpression(@"^(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[@$!%*?&])[a-zA-Z0-9@$!%*?&]{8,}$", ErrorMessage = "Password must be at least 8 characters long, and include letters, numbers, and special characters")]
        public string Password { get; set; } = null!;

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password", Prompt = "Confirm your password", Order = 4)]
        [Required(ErrorMessage = "Password confirmation is required")]
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = null!;

        [Display(Name = "I agree to the Terms & Conditions", Order = 5)]
        [Required(ErrorMessage = "You must agree to the Terms & Conditions")]
        public bool TermsAndConditions { get; set; } = false;
    }

    public async Task OnValidSubmit(EditContext editContext)
    {
        if(!SignUpForm.TermsAndConditions)
        {
            statusMessage = "You must agree to the Terms & Conditions";
            return;
        }
        var user = new ApplicationUser
            {
                UserProfile = new UserProfile
                {
                    FirstName = SignUpForm.FirstName,
                    LastName = SignUpForm.LastName,
                },
                UserName = SignUpForm.Email,
                Email = SignUpForm.Email,
                Created = DateTime.Now,

            };


        try
        {
            var alreadyExists = await UserManager.FindByEmailAsync(SignUpForm.Email);
            if (alreadyExists != null)
            {
                statusMessage = "An account with this email address already exists.";
                return;
            }
            var result = await UserManager.CreateAsync(user, SignUpForm.Password);
            if (result.Succeeded)
            {
                var roleResult = await UserManager.AddToRoleAsync(user, "User");
                if(!roleResult.Succeeded)
                {
                    statusMessage = "Unable to register roles in account. Please try again.";
                    return;
                }
            }
            if (!result.Succeeded)
            {
                statusMessage = "Unable to register account. Please try again.";
                return;
            }
        }
        catch (Exception ex)
        {
            statusMessage = "An error occured while creating the account.";
            return;
        }

        try
        {
            await Http.PostAsJsonAsync(Environment.GetEnvironmentVariable("API_GenerateCodeHTTP"), new { Email = SignUpForm.Email });
            if (UserManager.Options.SignIn.RequireConfirmedAccount)
            {
                NavigationManager.NavigateTo($"Account/RegisterConfirmation?email={user.Email}&returnUrl={ReturnUrl}");
            }
        }
        catch (Exception ex)
        {
            statusMessage = "An error occured while creating the verificationcode.";
            return;
        }
    }
}
