@page "/Account/RegisterConfirmation"
@rendermode InteractiveServer

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BlazorWebAppCamilla.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register confirmation</PageTitle>

<h1>Register confirmation</h1>



<h1>Verify Your Account</h1>
<p>Didn't receive an email?<button @onclick="ResendCode">Resend Code</button></p>
<EditForm class="form" method="post" novalidate FormName="VerifyCode" Model="VerifyCodeForm" asp-route-returnUrl="@ReturnUrl" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <StatusMessage Message="@StatusMessage" />
   
    <div class="mb-3">
        <label class="form-label">Enter Your Verification Code</label>
        <ValidationMessage For="() =>VerifyCodeForm.Code" class="text-danger" />
            <p>@StatusMessage</p>
        <InputText class="form-control" type="text" @bind-Value="VerifyCodeForm.Code" />
    </div>
    <button type="submit" class="btn-theme-s">Verify Code</button>
</EditForm>


@code {

    [SupplyParameterFromQuery]
    public string StatusMessage { get; set; } = "";

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromForm]
    private VerifyCodeModel VerifyCodeForm { get; set; } = new VerifyCodeModel();

    private async Task OnValidSubmit()
    {
        var result = await Http.PostAsJsonAsync("https://verificationprovider-silicon-camilla.azurewebsites.net/api/validate?code=y88D2-qlrXm5-KuFGf9kYo3-RgqiUN23aMZfkGM_ovOmAzFuI9m1Bg==", new
        {
            Email = Email,
            Code = VerifyCodeForm.Code
        });
        if (result.IsSuccessStatusCode)
        {
            var user = await UserManager.FindByEmailAsync(Email!);
            user!.EmailConfirmed = true;
            await UserManager.UpdateAsync(user);       
        }
        else
        {
            StatusMessage = "Invalid code.";
        }
    }

    private async Task ResendCode()
    {
        var result = await Http.PostAsJsonAsync("https://verificationprovider-silicon-camilla.azurewebsites.net/api/GenereteVerificationCodeHTTP?code=AU2PSgQQ2lf0u1KXPteNdTjVRQfF7hNIj7uEKRSpJtdtAzFuNlrtZw==", new { Email = Email });
        if (result.IsSuccessStatusCode)
        {
            StatusMessage = "Code resent";
        }
        else
        {
            StatusMessage = "Unable to resend code";
        }

    }

    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            StatusMessage = "Error finding user for unspecified email";
        }
    }
    public class VerifyCodeModel
    {
        [Required]
        public string Code { get; set; } = null!;
    }
}
