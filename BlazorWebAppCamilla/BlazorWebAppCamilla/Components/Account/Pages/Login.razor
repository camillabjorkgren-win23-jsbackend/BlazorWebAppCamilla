@page "/signin"


@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using BlazorWebAppCamilla.Data


@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<section class="sign-in">
    <div class="container">
        <div class="title">
            <h1>Welcome Back</h1>
            <p>Don't have an account yet? <a href="signup.html">Sign up here.</a></p>
        </div>

        @if(!String.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @errorMessage
            </div>
        }

        <EditForm method="post" class="form" Model="SignIn" novalidate OnValidSubmit="LoginUser" FormName="SignInForm">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label class="form-label">Email</label>
                <InputText type="email" @bind-Value="SignIn.Email" class="form-control" placeholder="Enter your email address" />
            </div>
            <div class="mb-3">
                <label class="form-label">Password</label>
                <InputText type="password" @bind-Value="SignIn.Password" placeholder="******" class="form-control" />
            </div>
            <div class="mb-3 form-check">
                <InputCheckbox class="form-check-input" @bind-Value="SignIn.RememberMe" />
                <label class="form-check-label">Remember me</label>
            </div>
            <button type="submit" class="button btn-theme">Sign in</button>
            <div class="form-text"><NavLink href="/forgotpassword">Forgot your password?</NavLink></div>
        </EditForm>
    </div>
</section>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private SignInForm SignIn { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    { 
        var noExists = await SignInManager.UserManager.FindByEmailAsync(SignIn.Email);
        if (noExists == null)
        {
            errorMessage = "Error: No user found.";
            return;
        }
        var result = await SignInManager.PasswordSignInAsync(SignIn.Email, SignIn.Password, SignIn.RememberMe, lockoutOnFailure: false);
    
        if (result.Succeeded)
        {
            RedirectManager.RedirectTo("/profile/details");          
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    public class SignInForm
    {
        [EmailAddress]
        [Display(Name = "Email address", Prompt = "Enter your email address", Order = 0)]
        [Required(ErrorMessage = "Email is required")]
        public string Email { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Password", Prompt = "Enter your password", Order = 1)]
        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = "";


        [Display(Name = "Remember me", Order = 2)]
        public bool RememberMe { get; set; }

    }
}
